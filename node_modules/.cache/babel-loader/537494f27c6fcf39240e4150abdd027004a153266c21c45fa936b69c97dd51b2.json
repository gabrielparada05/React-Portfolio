{"ast":null,"code":"import * as React from 'react';\nvar isUndefined = val => val === undefined;\nvar isNullOrUndefined = value => value == null;\nconst isObjectType = value => typeof value === 'object';\nvar isObject = value => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !(value instanceof Date);\nvar compact = value => value.filter(Boolean);\nvar get = function () {\n  let obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let path = arguments.length > 1 ? arguments[1] : undefined;\n  let defaultValue = arguments.length > 2 ? arguments[2] : undefined;\n  const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n  return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n};\nvar isKey = value => /^\\w*$/.test(value);\nvar stringToPath = input => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\nvar omit = (source, key) => {\n  const copy = Object.assign({}, source);\n  delete copy[key];\n  return copy;\n};\nconst focusFieldBy = (fields, callback, fieldsNames) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\nfunction deepMerge(target, source) {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n    try {\n      target[key] = isObject(targetValue) && isObject(sourceValue) || Array.isArray(targetValue) && Array.isArray(sourceValue) ? deepMerge(targetValue, sourceValue) : sourceValue;\n    } catch (_a) {}\n  }\n  return target;\n}\nfunction deepEqual(object1, object2, isErrorObject) {\n  if (isPrimitive(object1) || isPrimitive(object2) || object1 instanceof Date || object2 instanceof Date) {\n    return object1 === object2;\n  }\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n    for (const key of keys1) {\n      const val1 = object1[key];\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n        if ((isObject(val1) || Array.isArray(val1)) && (isObject(val2) || Array.isArray(val2)) ? !deepEqual(val1, val2, isErrorObject) : val1 !== val2) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\n  let index = -1;\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key]) ? set(dirtyFields[index] || {}, key) : dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), {\n          [key]: true\n        });\n      }\n    }\n    parentNode && !dirtyFields.length && delete parentNode[parentName];\n  }\n  return dirtyFields;\n}\nvar setFieldArrayDirtyFields = (values, defaultValues, dirtyFields) => deepMerge(setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)), setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)));\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\nconst EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change'\n};\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nconst SELECT = 'select';\nconst UNDEFINED = 'undefined';\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\nvar shouldRenderFormState = (formState, readFormStateRef, isRoot) => isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(readFormStateRef).length || Object.keys(formState).find(key => readFormStateRef[key] === (isRoot ? VALIDATION_MODE.all : true));\nconst getFieldsValues = function (fieldsRef) {\n  let defaultValuesRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    current: {}\n  };\n  let output = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n      set(output, name, _f ? _f.ref.disabled || _f.refs && _f.refs.every(ref => ref.disabled) ? undefined : _f.value : Array.isArray(field) ? [] : {});\n      if (current) {\n        getFieldsValues({\n          current\n        }, defaultValuesRef, output[name]);\n      }\n    }\n  }\n  return Object.assign(Object.assign({}, defaultValuesRef.current), output);\n};\nconst defaultReturn = {\n  isValid: false,\n  value: null\n};\nvar getRadioValue = options => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {\n  isValid: true,\n  value: option.value\n} : previous, defaultReturn) : defaultReturn;\nvar getMultipleSelectValue = options => [...options].filter(_ref => {\n  let {\n    selected\n  } = _ref;\n  return selected;\n}).map(_ref2 => {\n  let {\n    value\n  } = _ref2;\n  return value;\n});\nvar isRadioInput = element => element.type === 'radio';\nvar isFileInput = element => element.type === 'file';\nvar isCheckBoxInput = element => element.type === 'checkbox';\nvar isMultipleSelect = element => element.type === `${SELECT}-multiple`;\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\nvar getCheckboxValue = options => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(option => option && option.checked && !option.disabled).map(option => option.value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n    return options[0].checked && !options[0].disabled ?\n    // @ts-expect-error expected to work in the browser\n    options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) ? validResult : {\n      value: options[0].value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n  return defaultResult;\n};\nvar getFieldValueAs = (value, _ref3) => {\n  let {\n    valueAsNumber,\n    valueAsDate,\n    setValueAs\n  } = _ref3;\n  return valueAsNumber ? value === '' ? NaN : +value : valueAsDate ? new Date(value) : setValueAs ? setValueAs(value) : value;\n};\nfunction getFieldValue(field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n    if (ref.disabled) {\n      return;\n    }\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n    if (isCheckBoxInput(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? field._f.ref.value : ref.value, field._f);\n  }\n}\nvar isErrorStateChanged = _ref4 => {\n  let {\n    errors,\n    name,\n    error,\n    validFields,\n    fieldsWithValidation\n  } = _ref4;\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n  return isValid && !!previousError || !isValid && !deepEqual(previousError, error, true) || isValid && get(fieldsWithValidation, name) && !get(validFields, name);\n};\nvar isRegex = value => value instanceof RegExp;\nvar getValueAndMessage = validationData => isObject(validationData) && !isRegex(validationData) ? validationData : {\n  value: validationData,\n  message: ''\n};\nvar isString = value => typeof value === 'string';\nvar isFunction = value => typeof value === 'function';\nvar isBoolean = value => typeof value === 'boolean';\nvar isMessage = value => isString(value) || React.isValidElement(value);\nfunction getValidateError(result, ref) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'validate';\n  if (isMessage(result) || isBoolean(result) && !result) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref\n    };\n  }\n}\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? Object.assign(Object.assign({}, errors[name]), {\n  types: Object.assign(Object.assign({}, errors[name] && errors[name].types ? errors[name].types : {}), {\n    [type]: message || true\n  })\n}) : {};\nvar validateField = async (_ref5, validateAllFieldCriteria) => {\n  let {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue\n    }\n  } = _ref5;\n  const error = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = !inputValue || Array.isArray(inputValue) && !inputValue.length;\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n  const getMinMaxMessage = function (exceedMax, maxLengthMessage, minLengthMessage) {\n    let maxType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : INPUT_VALIDATION_RULES.maxLength;\n    let minType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : INPUT_VALIDATION_RULES.minLength;\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, appendErrorsCurry(exceedMax ? maxType : minType, message));\n  };\n  if (required && (!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {\n    const {\n      value,\n      message\n    } = isMessage(required) ? {\n      value: !!required,\n      message: required\n    } : getValueAndMessage(required);\n    if (value) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox ? (refs || [])[0] || {} : ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && inputValue !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n    if (!isNaN(inputValue)) {\n      const valueNumber = ref.valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate = ref.valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n  if (isString(inputValue) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > maxLengthOutput.value;\n    const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < minLengthOutput.value;\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n  if (isString(inputValue) && pattern && !isEmpty) {\n    const {\n      value: patternValue,\n      message\n    } = getValueAndMessage(pattern);\n    if (isRegex(patternValue) && !patternValue.test(inputValue)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n  if (validate) {\n    const validateRef = isRadioOrCheckbox && refs ? refs[0] : ref;\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, validateRef);\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {};\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n        const validateResult = await validateFunction(inputValue);\n        const validateError = getValidateError(validateResult, validateRef, key);\n        if (validateError) {\n          validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: validateRef\n        }, validationResult);\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n  return error;\n};\nvar skipValidation = _ref6 => {\n  let {\n    isOnBlur,\n    isOnChange,\n    isOnTouch,\n    isTouched,\n    isReValidateOnBlur,\n    isReValidateOnChange,\n    isBlurEvent,\n    isSubmitted,\n    isOnAll\n  } = _ref6;\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\nvar getNodeParentName = name => name.substring(0, name.search(/.\\d/)) || name;\nvar getProxyFormState = function (isProxyEnabled, formState, readFormStateRef, localReadFormStateRef) {\n  let isRoot = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  return isProxyEnabled ? new Proxy(formState, {\n    get: (obj, prop) => {\n      if (prop in obj) {\n        if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n          readFormStateRef.current[prop] = isRoot ? VALIDATION_MODE.all : true;\n        }\n        localReadFormStateRef && (localReadFormStateRef.current[prop] = true);\n        return obj[prop];\n      }\n      return undefined;\n    }\n  }) : formState;\n};\nclass Subscription {\n  constructor() {\n    this.tearDowns = [];\n  }\n  add(tearDown) {\n    this.tearDowns.push(tearDown);\n  }\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\nclass Subscriber {\n  constructor(observer, subscription) {\n    this.observer = observer;\n    this.closed = false;\n    subscription.add(() => this.closed = true);\n  }\n  next(value) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\nclass Subject {\n  constructor() {\n    this.observers = [];\n  }\n  next(value) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n  subscribe(observer) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n    return subscription;\n  }\n  unsubscribe() {\n    this.observers = [];\n  }\n}\nvar isWeb = typeof window !== UNDEFINED && typeof window.HTMLElement !== UNDEFINED && typeof document !== UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\nfunction baseGet(object, updatePath) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n  return object;\n}\nfunction unset(object, path) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n  if (childObject) {\n    delete childObject[key];\n  }\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n    if (k > 0) {\n      previousObjRef = object;\n    }\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(data => isObject(data) && !isEmptyObject(data) || isBoolean(data)).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n      previousObjRef = objectRef;\n    }\n  }\n  return object;\n}\nvar getValidationModes = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched\n});\nvar isRadioOrCheckboxFunction = ref => isRadioInput(ref) || isCheckBoxInput(ref);\nvar isHTMLElement = value => value instanceof HTMLElement;\nfunction getFields(fieldsNames, fieldsRefs) {\n  const currentFields = {};\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name);\n    if (field) {\n      !isKey(name) ? set(currentFields, name, field._f) : currentFields[name] = field._f;\n    }\n  }\n  return currentFields;\n}\nconst isWindowUndefined = typeof window === UNDEFINED;\nfunction useForm() {\n  let {\n    mode = VALIDATION_MODE.onSubmit,\n    reValidateMode = VALIDATION_MODE.onChange,\n    resolver,\n    context,\n    defaultValues = {},\n    shouldFocusError = true,\n    criteriaMode\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const fieldsRef = React.useRef({});\n  const fieldsNamesRef = React.useRef(new Set());\n  const formStateSubjectRef = React.useRef(new Subject());\n  const watchSubjectRef = React.useRef(new Subject());\n  const controllerSubjectRef = React.useRef(new Subject());\n  const fieldArraySubjectRef = React.useRef(new Subject());\n  const fieldArrayDefaultValuesRef = React.useRef({});\n  const watchFieldsRef = React.useRef(new Set());\n  const isMountedRef = React.useRef(false);\n  const fieldsWithValidationRef = React.useRef({});\n  const validFieldsRef = React.useRef({});\n  const defaultValuesRef = React.useRef(defaultValues);\n  const isWatchAllRef = React.useRef(false);\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef(new Set());\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !validationMode.isOnSubmit,\n    errors: {}\n  });\n  const readFormStateRef = React.useRef({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled\n  });\n  const formStateRef = React.useRef(formState);\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  const getIsValid = () => formStateRef.current.isValid = deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) && isEmptyObject(formStateRef.current.errors);\n  const shouldRenderBaseOnError = React.useCallback(function (name, error) {\n    let shouldRender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let state = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let isValid = arguments.length > 4 ? arguments[4] : undefined;\n    let isWatched = arguments.length > 5 ? arguments[5] : undefined;\n    let shouldReRender = shouldRender || isErrorStateChanged({\n      errors: formStateRef.current.errors,\n      error,\n      name,\n      validFields: validFieldsRef.current,\n      fieldsWithValidation: fieldsWithValidationRef.current\n    });\n    const previousError = get(formStateRef.current.errors, name);\n    if (error) {\n      unset(validFieldsRef.current, name);\n      shouldReRender = shouldReRender || !previousError || !deepEqual(previousError, error, true);\n      set(formStateRef.current.errors, name, error);\n    } else {\n      if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n        set(validFieldsRef.current, name, true);\n        shouldReRender = shouldReRender || previousError;\n      }\n      unset(formStateRef.current.errors, name);\n    }\n    if (shouldReRender && !isNullOrUndefined(shouldRender) || !isEmptyObject(state) || isWatched) {\n      const updatedFormState = Object.assign(Object.assign({}, state), {\n        isValid: resolverRef.current ? !!isValid : getIsValid(),\n        errors: formStateRef.current.errors\n      });\n      formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), updatedFormState);\n      formStateSubjectRef.current.next(isWatched ? {} : updatedFormState);\n    }\n    formStateSubjectRef.current.next({\n      isValidating: false\n    });\n  }, []);\n  const setFieldValue = React.useCallback(function (name, rawValue) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let shouldRender = arguments.length > 3 ? arguments[3] : undefined;\n    let shouldRegister = arguments.length > 4 ? arguments[4] : undefined;\n    shouldRegister && register(name);\n    const _f = get(fieldsRef.current, name, {})._f;\n    if (_f) {\n      const value = isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue) ? '' : rawValue;\n      _f.value = rawValue;\n      if (isRadioInput(_f.ref)) {\n        (_f.refs || []).forEach(radioRef => radioRef.checked = radioRef.value === value);\n      } else if (isFileInput(_f.ref) && !isString(value)) {\n        _f.ref.files = value;\n      } else if (isMultipleSelect(_f.ref)) {\n        [..._f.ref.options].forEach(selectRef => selectRef.selected = value.includes(selectRef.value));\n      } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n        _f.refs.length > 1 ? _f.refs.forEach(checkboxRef => checkboxRef.checked = Array.isArray(value) ? !!value.find(data => data === checkboxRef.value) : value === checkboxRef.value) : _f.refs[0].checked = !!value;\n      } else {\n        _f.ref.value = value;\n      }\n      if (shouldRender) {\n        const values = getFieldsValues(fieldsRef);\n        set(values, name, rawValue);\n        controllerSubjectRef.current.next({\n          values: Object.assign(Object.assign({}, defaultValuesRef.current), values),\n          name\n        });\n      }\n      options.shouldDirty && updateAndGetDirtyState(name);\n      options.shouldValidate && trigger(name);\n    }\n  }, []);\n  const getFormIsDirty = React.useCallback((name, data) => {\n    if (readFormStateRef.current.isDirty) {\n      const formValues = getFieldsValues(fieldsRef);\n      name && data && set(formValues, name, data);\n      return !deepEqual(formValues, defaultValuesRef.current);\n    }\n    return false;\n  }, []);\n  const updateAndGetDirtyState = React.useCallback(function (name) {\n    let shouldRender = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (readFormStateRef.current.isDirty || readFormStateRef.current.dirtyFields) {\n      const isFieldDirty = !deepEqual(get(defaultValuesRef.current, name), getFieldValue(get(fieldsRef.current, name)));\n      const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n      const previousIsDirty = formStateRef.current.isDirty;\n      isFieldDirty ? set(formStateRef.current.dirtyFields, name, true) : unset(formStateRef.current.dirtyFields, name);\n      const state = {\n        isDirty: getFormIsDirty(),\n        dirtyFields: formStateRef.current.dirtyFields\n      };\n      const isChanged = readFormStateRef.current.isDirty && previousIsDirty !== state.isDirty || readFormStateRef.current.dirtyFields && isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name);\n      isChanged && shouldRender && formStateSubjectRef.current.next(state);\n      return isChanged ? state : {};\n    }\n    return {};\n  }, []);\n  const executeValidation = React.useCallback(async (name, skipReRender) => {\n    const error = (await validateField(get(fieldsRef.current, name), isValidateAllFieldCriteria))[name];\n    shouldRenderBaseOnError(name, error, skipReRender);\n    return isUndefined(error);\n  }, [isValidateAllFieldCriteria]);\n  const executeSchemaOrResolverValidation = React.useCallback(async function (names) {\n    let currentNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const {\n      errors\n    } = await resolverRef.current(getFieldsValues(fieldsRef, defaultValuesRef), contextRef.current, {\n      criteriaMode,\n      names: currentNames,\n      fields: getFields(fieldsNamesRef.current, fieldsRef.current)\n    });\n    for (const name of names) {\n      const error = get(errors, name);\n      error ? set(formStateRef.current.errors, name, error) : unset(formStateRef.current.errors, name);\n    }\n    return errors;\n  }, [criteriaMode]);\n  const validateForm = async fieldsRef => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n        if (_f) {\n          const fieldError = await validateField(field, isValidateAllFieldCriteria);\n          if (fieldError[_f.name]) {\n            set(formStateRef.current.errors, _f.name, fieldError[_f.name]);\n            unset(validFieldsRef.current, _f.name);\n          } else if (get(fieldsWithValidationRef.current, _f.name)) {\n            set(validFieldsRef.current, _f.name, true);\n            unset(formStateRef.current.errors, _f.name);\n          }\n        }\n        current && (await validateForm(current));\n      }\n    }\n  };\n  const trigger = React.useCallback(async name => {\n    const fields = isUndefined(name) ? Object.keys(fieldsRef.current) : Array.isArray(name) ? name : [name];\n    let isValid;\n    formStateSubjectRef.current.next({\n      isValidating: true\n    });\n    if (resolverRef.current) {\n      isValid = isEmptyObject(await executeSchemaOrResolverValidation(fields, isUndefined(name) ? undefined : fields));\n    } else {\n      isUndefined(name) ? await validateForm(fieldsRef.current) : await Promise.all(fields.map(async data => await executeValidation(data, null)));\n    }\n    formStateSubjectRef.current.next({\n      errors: formStateRef.current.errors,\n      isValidating: false,\n      isValid: resolverRef.current ? isValid : getIsValid()\n    });\n  }, [executeSchemaOrResolverValidation, executeValidation]);\n  const setInternalValues = React.useCallback((name, value, options) => Object.entries(value).forEach(_ref7 => {\n    let [inputKey, inputValue] = _ref7;\n    const fieldName = `${name}.${inputKey}`;\n    const field = get(fieldsRef.current, fieldName);\n    field && !field._f ? setInternalValues(fieldName, inputValue, options) : setFieldValue(fieldName, inputValue, options, true, !field);\n  }), [trigger]);\n  const isFieldWatched = name => isWatchAllRef.current || watchFieldsRef.current.has(name) || watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n  const updateValueAndGetDefault = name => {\n    let defaultValue;\n    const field = get(fieldsRef.current, name);\n    if (field && (!isEmptyObject(defaultValuesRef.current) || !isUndefined(field._f.value))) {\n      defaultValue = isUndefined(field._f.value) ? get(defaultValuesRef.current, name) : field._f.value;\n      if (!isUndefined(defaultValue)) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n    return defaultValue;\n  };\n  const setValue = function (name, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    isMountedRef.current = true;\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = fieldArrayNamesRef.current.has(name);\n    if (isFieldArray) {\n      fieldArraySubjectRef.current.next({\n        fields: value,\n        name,\n        isReset: true\n      });\n      if ((readFormStateRef.current.isDirty || readFormStateRef.current.dirtyFields) && options.shouldDirty) {\n        set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(value, get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n        formStateSubjectRef.current.next({\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getFormIsDirty(name, value)\n        });\n      }\n    }\n    field && !field._f || isFieldArray ? setInternalValues(name, value, isFieldArray ? {} : options) : setFieldValue(name, value, options, true, !field);\n    isFieldWatched(name) && formStateSubjectRef.current.next({});\n    watchSubjectRef.current.next({\n      name,\n      value\n    });\n  };\n  const handleChange = React.useCallback(async _ref8 => {\n    let {\n      type,\n      target,\n      target: {\n        value,\n        type: inputType\n      }\n    } = _ref8;\n    let name = target.name;\n    let error;\n    let isValid;\n    const field = get(fieldsRef.current, name);\n    if (field) {\n      const inputValue = inputType ? getFieldValue(field) : value;\n      const isBlurEvent = type === EVENTS.BLUR;\n      const {\n        isOnBlur: isReValidateOnBlur,\n        isOnChange: isReValidateOnChange\n      } = getValidationModes(reValidateMode);\n      const shouldSkipValidation = skipValidation(Object.assign({\n        isBlurEvent,\n        isTouched: !!get(formStateRef.current.touchedFields, name),\n        isSubmitted: formStateRef.current.isSubmitted,\n        isReValidateOnBlur,\n        isReValidateOnChange\n      }, validationMode));\n      const isWatched = !isBlurEvent && isFieldWatched(name);\n      if (!isUndefined(inputValue)) {\n        field._f.value = inputValue;\n      }\n      const state = updateAndGetDirtyState(name, false);\n      if (isBlurEvent && !get(formStateRef.current.touchedFields, name)) {\n        set(formStateRef.current.touchedFields, name, true);\n        state.touchedFields = formStateRef.current.touchedFields;\n      }\n      let shouldRender = !isEmptyObject(state) || isWatched;\n      if (shouldSkipValidation) {\n        !isBlurEvent && watchSubjectRef.current.next({\n          name,\n          type,\n          value: inputValue\n        });\n        return shouldRender && formStateSubjectRef.current.next(isWatched ? {} : state);\n      }\n      formStateSubjectRef.current.next({\n        isValidating: true\n      });\n      if (resolverRef.current) {\n        const {\n          errors\n        } = await resolverRef.current(getFieldsValues(fieldsRef, defaultValuesRef), contextRef.current, {\n          criteriaMode,\n          fields: getFields([name], fieldsRef.current),\n          names: [name]\n        });\n        const previousFormIsValid = formStateRef.current.isValid;\n        error = get(errors, name);\n        if (isCheckBoxInput(target) && !error) {\n          const parentNodeName = getNodeParentName(name);\n          const currentError = get(errors, parentNodeName, {});\n          currentError.type && currentError.message && (error = currentError);\n          if (currentError || get(formStateRef.current.errors, parentNodeName)) {\n            name = parentNodeName;\n          }\n        }\n        isValid = isEmptyObject(errors);\n        previousFormIsValid !== isValid && (shouldRender = true);\n      } else {\n        error = (await validateField(field, isValidateAllFieldCriteria))[name];\n      }\n      !isBlurEvent && watchSubjectRef.current.next({\n        name,\n        type,\n        value: inputValue\n      });\n      shouldRenderBaseOnError(name, error, shouldRender, state, isValid, isWatched);\n    }\n  }, []);\n  const getValues = fieldNames => {\n    const values = isMountedRef.current ? getFieldsValues(fieldsRef, defaultValuesRef) : defaultValuesRef.current;\n    return isUndefined(fieldNames) ? values : isString(fieldNames) ? get(values, fieldNames) : fieldNames.map(name => get(values, name));\n  };\n  const updateIsValid = React.useCallback(async function () {\n    let values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const previousIsValid = formStateRef.current.isValid;\n    if (resolver) {\n      const {\n        errors\n      } = await resolverRef.current(Object.assign(Object.assign({}, getFieldsValues(fieldsRef, defaultValuesRef)), values), contextRef.current, {\n        criteriaMode,\n        fields: getFields(fieldsNamesRef.current, fieldsRef.current)\n      });\n      formStateRef.current.isValid = isEmptyObject(errors);\n    } else {\n      getIsValid();\n    }\n    previousIsValid !== formStateRef.current.isValid && formStateSubjectRef.current.next({\n      isValid: formStateRef.current.isValid\n    });\n  }, [criteriaMode]);\n  const clearErrors = name => {\n    name && (Array.isArray(name) ? name : [name]).forEach(inputName => unset(formStateRef.current.errors, inputName));\n    formStateSubjectRef.current.next({\n      errors: name ? formStateRef.current.errors : {}\n    });\n  };\n  const setError = (name, error, options) => {\n    const ref = ((get(fieldsRef.current, name) || {\n      _f: {}\n    })._f || {}).ref;\n    set(formStateRef.current.errors, name, Object.assign(Object.assign({}, error), {\n      ref\n    }));\n    formStateSubjectRef.current.next({\n      errors: formStateRef.current.errors,\n      isValid: false\n    });\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n  const watchInternal = React.useCallback((fieldNames, defaultValue, isGlobal) => {\n    const isArrayNames = Array.isArray(fieldNames);\n    const fieldValues = isMountedRef.current ? getValues() : isUndefined(defaultValue) ? defaultValuesRef.current : isArrayNames ? defaultValue || {} : {\n      [fieldNames]: defaultValue\n    };\n    if (isUndefined(fieldNames)) {\n      isGlobal && (isWatchAllRef.current = true);\n      return fieldValues;\n    }\n    const result = [];\n    for (const fieldName of isArrayNames ? fieldNames : [fieldNames]) {\n      isGlobal && watchFieldsRef.current.add(fieldName);\n      result.push(get(fieldValues, fieldName));\n    }\n    return isArrayNames ? result : result[0];\n  }, []);\n  const watch = (fieldName, defaultValue) => isFunction(fieldName) ? watchSubjectRef.current.subscribe({\n    next: info => fieldName(watchInternal(undefined, defaultValue), info)\n  }) : watchInternal(fieldName, defaultValue, true);\n  const unregister = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    for (const inputName of name ? Array.isArray(name) ? name : [name] : Object.keys(fieldsNamesRef.current)) {\n      fieldsNamesRef.current.delete(inputName);\n      fieldArrayNamesRef.current.delete(inputName);\n      if (get(fieldsRef.current, inputName)) {\n        if (!options.keepIsValid) {\n          unset(fieldsWithValidationRef.current, inputName);\n          unset(validFieldsRef.current, inputName);\n        }\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty && unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched && unset(formStateRef.current.touchedFields, inputName);\n        !options.keepDefaultValue && unset(defaultValuesRef.current, inputName);\n        watchSubjectRef.current.next({\n          name: inputName\n        });\n      }\n    }\n    formStateSubjectRef.current.next(Object.assign(Object.assign(Object.assign({}, formStateRef.current), !options.keepDirty ? {} : {\n      isDirty: getFormIsDirty()\n    }), resolverRef.current ? {} : {\n      isValid: getIsValid()\n    }));\n    if (!options.keepIsValid) {\n      updateIsValid();\n    }\n  };\n  const registerFieldRef = (name, ref, options) => {\n    let field = get(fieldsRef.current, name);\n    if (field) {\n      const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n      if ((isRadioOrCheckbox ? Array.isArray(field._f.refs) && compact(field._f.refs).find(option => ref.value === option.value && option === ref) : ref === field._f.ref) || !field || isWeb && isHTMLElement(field._f.ref) && !isHTMLElement(ref)) {\n        return;\n      }\n      field = {\n        _f: isRadioOrCheckbox ? Object.assign(Object.assign({}, field._f), {\n          refs: [...compact(field._f.refs || []).filter(ref => isHTMLElement(ref) && document.contains(ref)), ref],\n          ref: {\n            type: ref.type,\n            name\n          }\n        }) : Object.assign(Object.assign({}, field._f), {\n          ref\n        })\n      };\n      set(fieldsRef.current, name, field);\n      const defaultValue = updateValueAndGetDefault(name);\n      if (isRadioOrCheckbox && Array.isArray(defaultValue) ? !deepEqual(get(fieldsRef.current, name)._f.value, defaultValue) : isUndefined(get(fieldsRef.current, name)._f.value)) {\n        get(fieldsRef.current, name)._f.value = getFieldValue(get(fieldsRef.current, name));\n      }\n      if (options) {\n        if (!validationMode.isOnSubmit && field && readFormStateRef.current.isValid) {\n          validateField(field, isValidateAllFieldCriteria).then(error => {\n            isEmptyObject(error) ? set(validFieldsRef.current, name, true) : unset(validFieldsRef.current, name);\n            formStateRef.current.isValid && !isEmptyObject(error) && setFormState(Object.assign(Object.assign({}, formStateRef.current), {\n              isValid: getIsValid()\n            }));\n          });\n        }\n      }\n    }\n  };\n  const register = React.useCallback((name, options) => {\n    set(fieldsRef.current, name, {\n      _f: Object.assign(Object.assign(Object.assign({}, get(fieldsRef.current, name) ? Object.assign({\n        ref: (get(fieldsRef.current, name)._f || {}).ref\n      }, get(fieldsRef.current, name)._f) : {\n        ref: {\n          name\n        }\n      }), {\n        name\n      }), options)\n    });\n    options && set(fieldsWithValidationRef.current, name, true);\n    fieldsNamesRef.current.add(name);\n    updateValueAndGetDefault(name);\n    return isWindowUndefined ? {\n      name: name\n    } : {\n      name,\n      onChange: handleChange,\n      onBlur: handleChange,\n      ref: ref => ref && registerFieldRef(name, ref, options)\n    };\n  }, [defaultValuesRef.current]);\n  const handleSubmit = React.useCallback((onValid, onInvalid) => async e => {\n    if (e && e.preventDefault) {\n      e.preventDefault();\n      e.persist();\n    }\n    let fieldValues = Object.assign(Object.assign({}, defaultValuesRef.current), getFieldsValues(fieldsRef, defaultValuesRef));\n    formStateSubjectRef.current.next({\n      isSubmitting: true\n    });\n    try {\n      if (resolverRef.current) {\n        const {\n          errors,\n          values\n        } = await resolverRef.current(fieldValues, contextRef.current, {\n          criteriaMode,\n          fields: getFields(fieldsNamesRef.current, fieldsRef.current)\n        });\n        formStateRef.current.errors = errors;\n        fieldValues = values;\n      } else {\n        await validateForm(fieldsRef.current);\n      }\n      if (isEmptyObject(formStateRef.current.errors) && Object.keys(formStateRef.current.errors).every(name => get(fieldValues, name))) {\n        formStateSubjectRef.current.next({\n          errors: {},\n          isSubmitting: true\n        });\n        await onValid(fieldValues, e);\n      } else {\n        onInvalid && (await onInvalid(formStateRef.current.errors, e));\n        shouldFocusError && focusFieldBy(fieldsRef.current, key => get(formStateRef.current.errors, key), fieldsNamesRef.current);\n      }\n    } finally {\n      formStateRef.current.isSubmitted = true;\n      formStateSubjectRef.current.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n        submitCount: formStateRef.current.submitCount + 1,\n        errors: formStateRef.current.errors\n      });\n    }\n  }, [shouldFocusError, isValidateAllFieldCriteria, criteriaMode]);\n  const resetFromState = React.useCallback(_ref9 => {\n    let {\n      keepErrors,\n      keepDirty,\n      keepIsSubmitted,\n      keepTouched,\n      keepIsValid,\n      keepSubmitCount\n    } = _ref9;\n    if (!keepIsValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n    formStateSubjectRef.current.next({\n      submitCount: keepSubmitCount ? formStateRef.current.submitCount : 0,\n      isDirty: keepDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: keepIsSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: keepIsValid ? formStateRef.current.isValid : !validationMode.isOnSubmit,\n      dirtyFields: keepDirty ? formStateRef.current.dirtyFields : {},\n      touchedFields: keepTouched ? formStateRef.current.touchedFields : {},\n      errors: keepErrors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n  }, []);\n  const reset = function (values) {\n    let keepStateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const updatedValues = values || defaultValuesRef.current;\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form').reset();\n              break;\n            } catch (_a) {}\n          }\n        }\n      }\n    }\n    !keepStateOptions.keepDefaultValues && (defaultValuesRef.current = Object.assign({}, updatedValues));\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n      controllerSubjectRef.current.next({\n        values: Object.assign({}, updatedValues)\n      });\n      watchSubjectRef.current.next({\n        value: Object.assign({}, updatedValues)\n      });\n      fieldArraySubjectRef.current.next({\n        fields: Object.assign({}, updatedValues),\n        isReset: true\n      });\n    }\n    resetFromState(keepStateOptions);\n  };\n  React.useEffect(() => {\n    isMountedRef.current = true;\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next() {\n        let formState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), formState);\n          setFormState(formStateRef.current);\n        }\n      }\n    });\n    const useFieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next(state) {\n        if (state.fields && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.fields);\n          updateIsValid(values);\n        }\n      }\n    });\n    resolverRef.current && readFormStateRef.current.isValid && updateIsValid();\n    return () => {\n      watchSubjectRef.current.unsubscribe();\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n  return {\n    control: React.useMemo(() => ({\n      register,\n      isWatchAllRef,\n      watchFieldsRef,\n      getFormIsDirty,\n      formStateSubjectRef,\n      fieldArraySubjectRef,\n      controllerSubjectRef,\n      watchSubjectRef,\n      watchInternal,\n      fieldsRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      fieldArrayDefaultValuesRef\n    }), []),\n    formState: getProxyFormState(isProxyEnabled, formState, readFormStateRef),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, [])\n  };\n}\nconst FormContext = React.createContext(null);\nFormContext.displayName = 'RHFContext';\nconst useFormContext = () => React.useContext(FormContext);\nconst FormProvider = props => React.createElement(FormContext.Provider, {\n  value: omit(props, 'children')\n}, props.children);\nvar generateId = () => {\n  const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\nvar mapIds = function () {\n  let values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let keyName = arguments.length > 1 ? arguments[1] : undefined;\n  return values.map(value => Object.assign({\n    [keyName]: value && value[keyName] || generateId()\n  }, value));\n};\nfunction removeAtIndexes(data, indexes) {\n  let i = 0;\n  const temp = [...data];\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n  return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index) ? [] : removeAtIndexes(data, (Array.isArray(index) ? index : [index]).sort((a, b) => a - b));\nvar moveArrayAt = (data, from, to) => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n  return [];\n};\nvar swapArrayAt = (data, indexA, indexB) => {\n  data[indexA] = [data[indexB], data[indexB] = data[indexA]][0];\n};\nfunction prepend(data, value) {\n  return [...(Array.isArray(value) ? value : [value]), ...data];\n}\nfunction append(data, value) {\n  return [...data, ...(Array.isArray(value) ? value : [value])];\n}\nfunction insert(data, index, value) {\n  return [...data.slice(0, index), ...(Array.isArray(value) ? value : [value]), ...data.slice(index)];\n}\nvar fillEmptyArray = value => Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\nconst useFieldArray = _ref10 => {\n  let {\n    control,\n    name,\n    keyName = 'id'\n  } = _ref10;\n  const methods = useFormContext();\n  const focusNameRef = React.useRef('');\n  const {\n    isWatchAllRef,\n    watchFieldsRef,\n    getFormIsDirty,\n    watchSubjectRef,\n    fieldArraySubjectRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    formStateRef,\n    formStateSubjectRef,\n    readFormStateRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef\n  } = control || methods.control;\n  const [fields, setFields] = React.useState(mapIds(get(fieldArrayDefaultValuesRef.current, getNodeParentName(name)) ? get(fieldArrayDefaultValuesRef.current, name, []) : get(defaultValuesRef.current, name, []), keyName));\n  set(fieldArrayDefaultValuesRef.current, name, [...fields]);\n  fieldArrayNamesRef.current.add(name);\n  const omitKey = fields => fields.map(field => omit(field || {}, keyName));\n  const getCurrentFieldsValues = () => {\n    const values = get(getFieldsValues(fieldsRef, defaultValuesRef), name, []);\n    return mapIds(get(fieldArrayDefaultValuesRef.current, name, []).map((item, index) => Object.assign(Object.assign({}, item), values[index])), keyName);\n  };\n  const getFocusDetail = (index, options) => options ? !isUndefined(options.focusIndex) ? `${name}.${options.focusIndex}` : options.focusName ? options.focusName : !options.shouldFocus ? '' : `${name}.${index}` : `${name}.${index}`;\n  const resetFields = index => (Array.isArray(index) ? index : [index]).forEach(currentIndex => set(fieldsRef.current, `${name}${isUndefined(currentIndex) ? '' : `.${currentIndex}`}`, isUndefined(currentIndex) ? [] : undefined));\n  const setFieldsAndNotify = function () {\n    let fieldsValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return setFields(mapIds(fieldsValues, keyName));\n  };\n  const cleanup = ref => !compact(get(ref, name, [])).length && unset(ref, name);\n  const updateDirtyFieldsWithDefaultValues = updatedFieldArrayValues => updatedFieldArrayValues && set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFieldArrayValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n  const batchStateUpdate = function (method, args) {\n    let updatedFieldArrayValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let shouldSet = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    if (get(fieldsRef.current, name)) {\n      const output = method(get(fieldsRef.current, name), args.argA, args.argB);\n      shouldSet && set(fieldsRef.current, name, output);\n    }\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(get(formStateRef.current.errors, name), args.argA, args.argB);\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n    if (readFormStateRef.current.touchedFields && get(formStateRef.current.touchedFields, name)) {\n      const output = method(get(formStateRef.current.touchedFields, name), args.argA, args.argB);\n      shouldSet && set(formStateRef.current.touchedFields, name, output);\n      cleanup(formStateRef.current.touchedFields);\n    }\n    if (readFormStateRef.current.dirtyFields || readFormStateRef.current.isDirty) {\n      set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFieldArrayValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n      updateDirtyFieldsWithDefaultValues(updatedFieldArrayValues);\n      cleanup(formStateRef.current.dirtyFields);\n    }\n    if (readFormStateRef.current.isValid) {\n      set(validFieldsRef.current, name, method(get(validFieldsRef.current, name, []), args.argA));\n      cleanup(validFieldsRef.current);\n      set(fieldsWithValidationRef.current, name, method(get(fieldsWithValidationRef.current, name, []), args.argA));\n      cleanup(fieldsWithValidationRef.current);\n    }\n    formStateSubjectRef.current.next({\n      isDirty: getFormIsDirty(name, omitKey(updatedFieldArrayValues)),\n      errors: formStateRef.current.errors,\n      isValid: formStateRef.current.isValid\n    });\n  };\n  const registerFieldArray = function (values) {\n    let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let parentName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    return values.forEach((appendValueItem, valueIndex) => Object.entries(appendValueItem).forEach(_ref11 => {\n      let [key, value] = _ref11;\n      const inputName = `${parentName || name}.${parentName ? valueIndex : index + valueIndex}.${key}`;\n      Array.isArray(value) ? registerFieldArray(value, valueIndex, inputName) : set(fieldsRef.current, inputName, {\n        _f: {\n          ref: {\n            name: inputName\n          },\n          name: inputName,\n          value\n        }\n      });\n    }));\n  };\n  const append$1 = (value, options) => {\n    const appendValue = Array.isArray(value) ? value : [value];\n    const updatedFieldArrayValues = append(getCurrentFieldsValues(), appendValue);\n    const currentIndex = updatedFieldArrayValues.length - appendValue.length;\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(append, {\n      argA: fillEmptyArray(value)\n    }, updatedFieldArrayValues, false);\n    registerFieldArray(appendValue, currentIndex);\n    focusNameRef.current = getFocusDetail(currentIndex, options);\n  };\n  const prepend$1 = (value, options) => {\n    const prependValue = Array.isArray(value) ? value : [value];\n    const updatedFieldArrayValues = prepend(getCurrentFieldsValues(), prependValue);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(prepend, {\n      argA: fillEmptyArray(value)\n    }, updatedFieldArrayValues);\n    registerFieldArray(prependValue);\n    focusNameRef.current = getFocusDetail(0, options);\n  };\n  const remove = index => {\n    const updatedFieldArrayValues = removeArrayAt(getCurrentFieldsValues(), index);\n    resetFields(index);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(removeArrayAt, {\n      argA: index\n    }, updatedFieldArrayValues);\n  };\n  const insert$1 = (index, value, options) => {\n    const insertValue = Array.isArray(value) ? value : [value];\n    const updatedFieldArrayValues = insert(getCurrentFieldsValues(), index, insertValue);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(insert, {\n      argA: index,\n      argB: fillEmptyArray(value)\n    }, updatedFieldArrayValues);\n    registerFieldArray(insertValue, index);\n    focusNameRef.current = getFocusDetail(index, options);\n  };\n  const swap = (indexA, indexB) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    batchStateUpdate(swapArrayAt, {\n      argA: indexA,\n      argB: indexB\n    }, fieldValues, false);\n    setFieldsAndNotify(fieldValues);\n  };\n  const move = (from, to) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    setFieldsAndNotify(fieldValues);\n    batchStateUpdate(moveArrayAt, {\n      argA: from,\n      argB: to\n    }, fieldValues, false);\n  };\n  React.useEffect(() => {\n    if (isWatchAllRef.current) {\n      formStateSubjectRef.current.next({});\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (name.startsWith(watchField)) {\n          formStateSubjectRef.current.next({});\n          break;\n        }\n      }\n    }\n    watchSubjectRef.current.next({\n      name,\n      value: get(getFieldsValues(fieldsRef, defaultValuesRef), name, [])\n    });\n    focusNameRef.current && focusFieldBy(fieldsRef.current, key => key.startsWith(focusNameRef.current));\n    focusNameRef.current = '';\n    fieldArraySubjectRef.current.next({\n      name,\n      fields: omitKey([...fields])\n    });\n  }, [fields, name]);\n  React.useEffect(() => {\n    const fieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next(_ref12) {\n        let {\n          name: inputFieldArrayName,\n          fields,\n          isReset\n        } = _ref12;\n        if (isReset) {\n          unset(fieldsRef.current, inputFieldArrayName || name);\n          inputFieldArrayName ? set(fieldArrayDefaultValuesRef.current, inputFieldArrayName, fields) : fieldArrayDefaultValuesRef.current = fields;\n          setFieldsAndNotify(get(fieldArrayDefaultValuesRef.current, name));\n        }\n      }\n    });\n    !get(fieldsRef.current, name) && set(fieldsRef.current, name, []);\n    return () => {\n      fieldArrayDefaultValuesRef.current = getFieldsValues(fieldsRef);\n      fieldArraySubscription.unsubscribe();\n    };\n  }, []);\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend$1, [name]),\n    append: React.useCallback(append$1, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert$1, [name]),\n    fields: fields\n  };\n};\nfunction useFormState(props) {\n  const methods = useFormContext();\n  const {\n    formStateRef,\n    formStateSubjectRef,\n    readFormStateRef\n  } = props && props.control || methods.control;\n  const [formState, updateFormState] = React.useState(formStateRef.current);\n  const readFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  });\n  React.useEffect(() => {\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next: formState => {\n        shouldRenderFormState(formState, readFormState.current) && updateFormState(Object.assign(Object.assign({}, formStateRef.current), formState));\n      }\n    });\n    return () => formStateSubscription.unsubscribe();\n  }, []);\n  return getProxyFormState(isProxyEnabled, formState, readFormStateRef, readFormState, false);\n}\nvar getControllerValue = event => isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;\nvar isNameInFieldArray = (names, name) => [...names].some(current => getNodeParentName(name) === current);\nfunction useController(_ref13) {\n  let {\n    name,\n    rules,\n    defaultValue,\n    control\n  } = _ref13;\n  const methods = useFormContext();\n  const {\n    defaultValuesRef,\n    register,\n    fieldsRef,\n    fieldArrayNamesRef,\n    controllerSubjectRef\n  } = control || methods.control;\n  const {\n    onChange,\n    onBlur,\n    ref\n  } = register(name, rules);\n  const [value, setInputStateValue] = React.useState(isUndefined(get(fieldsRef.current, name)._f.value) || isNameInFieldArray(fieldArrayNamesRef.current, name) ? isUndefined(defaultValue) ? get(defaultValuesRef.current, name) : defaultValue : get(fieldsRef.current, name)._f.value);\n  const formState = useFormState({\n    control: control || methods.control\n  });\n  get(fieldsRef.current, name)._f.value = value;\n  React.useEffect(() => {\n    const controllerSubscription = controllerSubjectRef.current.subscribe({\n      next: data => (!data.name || name === data.name) && setInputStateValue(get(data.values, name))\n    });\n    ref({\n      target: value\n    });\n    return () => controllerSubscription.unsubscribe();\n  }, [name]);\n  return {\n    field: {\n      onChange: event => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n        onChange({\n          target: {\n            value,\n            name: name\n          },\n          type: EVENTS.CHANGE\n        });\n      },\n      onBlur: () => {\n        onBlur({\n          target: {\n            name: name\n          },\n          type: EVENTS.BLUR\n        });\n      },\n      name,\n      value,\n      ref\n    },\n    formState,\n    fieldState: Object.defineProperties({}, {\n      invalid: {\n        get() {\n          return !!get(formState.errors, name);\n        }\n      },\n      isDirty: {\n        get() {\n          return !!get(formState.dirtyFields, name);\n        }\n      },\n      isTouched: {\n        get() {\n          return !!get(formState.touchedFields, name);\n        }\n      },\n      error: {\n        get() {\n          return get(formState.errors, name);\n        }\n      }\n    })\n  };\n}\nfunction useWatch(props) {\n  const {\n    control,\n    name,\n    defaultValue\n  } = props || {};\n  const methods = useFormContext();\n  const {\n    watchInternal,\n    watchSubjectRef\n  } = control || methods.control;\n  const [value, updateValue] = React.useState(isUndefined(defaultValue) ? watchInternal(name) : defaultValue);\n  React.useEffect(() => {\n    watchInternal(name);\n    const watchSubscription = watchSubjectRef.current.subscribe({\n      next: _ref14 => {\n        let {\n          name: inputName,\n          value\n        } = _ref14;\n        (!name || !inputName || (Array.isArray(name) ? name : [name]).some(fieldName => inputName && fieldName && inputName.startsWith(fieldName))) && updateValue(isString(inputName) && name === inputName && !isUndefined(value) ? value : watchInternal(name, defaultValue));\n      }\n    });\n    return () => watchSubscription.unsubscribe();\n  }, [name]);\n  return value;\n}\nconst Controller = props => props.render(useController(props));\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };","map":{"version":3,"names":["isUndefined","val","undefined","isNullOrUndefined","value","isObjectType","isObject","Array","isArray","Date","compact","filter","Boolean","get","obj","arguments","length","path","defaultValue","result","split","reduce","key","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","omit","source","copy","Object","assign","focusFieldBy","fields","callback","fieldsNames","keys","field","_f","current","name","ref","focus","refs","isPrimitive","deepMerge","target","targetValue","sourceValue","_a","deepEqual","object1","object2","isErrorObject","React","isValidElement","keys1","keys2","val1","val2","setDirtyFields","values","defaultValues","dirtyFields","parentNode","parentName","setFieldArrayDirtyFields","slice","isEmptyObject","EVENTS","BLUR","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","shouldRenderFormState","formState","readFormStateRef","isRoot","find","getFieldsValues","fieldsRef","defaultValuesRef","output","disabled","every","defaultReturn","isValid","getRadioValue","options","previous","option","checked","getMultipleSelectValue","_ref","selected","map","_ref2","isRadioInput","element","type","isFileInput","isCheckBoxInput","isMultipleSelect","defaultResult","validResult","getCheckboxValue","attributes","getFieldValueAs","_ref3","valueAsNumber","valueAsDate","setValueAs","NaN","getFieldValue","files","isErrorStateChanged","_ref4","errors","error","validFields","fieldsWithValidation","previousError","isRegex","RegExp","getValueAndMessage","validationData","message","isString","isFunction","isBoolean","isMessage","getValidateError","appendErrors","validateAllFieldCriteria","types","validateField","_ref5","inputValue","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","parseFloat","valueDate","maxLengthOutput","minLengthOutput","patternValue","validateRef","validateError","validationResult","validateFunction","entries","validateResult","skipValidation","_ref6","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","getNodeParentName","substring","search","getProxyFormState","isProxyEnabled","localReadFormStateRef","Proxy","prop","Subscription","constructor","tearDowns","add","tearDown","push","unsubscribe","teardown","Subscriber","observer","subscription","closed","next","Subject","observers","subscribe","subscriber","isWeb","window","HTMLElement","document","baseGet","updatePath","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","data","getValidationModes","mode","isOnSubmit","isRadioOrCheckboxFunction","isHTMLElement","getFields","fieldsRefs","currentFields","isWindowUndefined","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","useRef","fieldsNamesRef","Set","formStateSubjectRef","watchSubjectRef","controllerSubjectRef","fieldArraySubjectRef","fieldArrayDefaultValuesRef","watchFieldsRef","isMountedRef","fieldsWithValidationRef","validFieldsRef","isWatchAllRef","contextRef","resolverRef","fieldArrayNamesRef","validationMode","isValidateAllFieldCriteria","setFormState","useState","isDirty","isValidating","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","formStateRef","getIsValid","shouldRenderBaseOnError","useCallback","shouldRender","state","isWatched","shouldReRender","updatedFormState","setFieldValue","rawValue","shouldRegister","register","forEach","radioRef","selectRef","includes","checkboxRef","shouldDirty","updateAndGetDirtyState","shouldValidate","trigger","getFormIsDirty","formValues","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","executeSchemaOrResolverValidation","names","currentNames","validateForm","fieldError","Promise","setInternalValues","_ref7","inputKey","fieldName","isFieldWatched","has","match","updateValueAndGetDefault","setValue","isFieldArray","isReset","handleChange","_ref8","inputType","shouldSkipValidation","previousFormIsValid","parentNodeName","currentError","getValues","fieldNames","updateIsValid","previousIsValid","clearErrors","inputName","setError","shouldFocus","watchInternal","isGlobal","isArrayNames","fieldValues","watch","info","unregister","delete","keepIsValid","keepError","keepValue","keepDirty","keepTouched","keepDefaultValue","registerFieldRef","contains","then","handleSubmit","onValid","onInvalid","e","preventDefault","persist","resetFromState","_ref9","keepErrors","keepIsSubmitted","keepSubmitCount","reset","keepStateOptions","updatedValues","keepValues","inputRef","closest","keepDefaultValues","useEffect","formStateSubscription","useFieldArraySubscription","control","useMemo","FormContext","createContext","displayName","useFormContext","useContext","FormProvider","props","createElement","Provider","children","generateId","d","performance","now","c","r","Math","random","toString","mapIds","keyName","removeAtIndexes","indexes","i","temp","splice","removeArrayAt","sort","a","b","moveArrayAt","from","to","swapArrayAt","indexA","indexB","prepend","append","insert","fillEmptyArray","fill","useFieldArray","_ref10","methods","focusNameRef","setFields","omitKey","getCurrentFieldsValues","getFocusDetail","focusIndex","focusName","resetFields","currentIndex","setFieldsAndNotify","fieldsValues","cleanup","updateDirtyFieldsWithDefaultValues","updatedFieldArrayValues","batchStateUpdate","method","args","shouldSet","argA","argB","registerFieldArray","appendValueItem","valueIndex","_ref11","append$1","appendValue","prepend$1","prependValue","remove","insert$1","insertValue","swap","move","watchField","startsWith","fieldArraySubscription","_ref12","inputFieldArrayName","useFormState","updateFormState","readFormState","getControllerValue","event","isNameInFieldArray","some","useController","_ref13","rules","setInputStateValue","controllerSubscription","fieldState","defineProperties","invalid","useWatch","updateValue","watchSubscription","_ref14","Controller","render"],"sources":["C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\isUndefined.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\isNullOrUndefined.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\isObject.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\compact.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\get.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\isKey.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\stringToPath.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\set.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\omit.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\logic\\focusFieldBy.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\isPrimitive.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\deepMerge.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\deepEqual.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\logic\\setFieldArrayDirtyFields.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\isEmptyObject.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\constants.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\logic\\shouldRenderFormState.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\logic\\getFieldsValues.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\logic\\getRadioValue.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\logic\\getMultipleSelectValue.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\isRadioInput.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\isFileInput.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\isCheckBoxInput.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\isMultipleSelect.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\logic\\getCheckboxValue.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\logic\\getFieldValueAs.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\logic\\getFieldValue.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\logic\\isErrorStateChanged.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\isRegex.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\logic\\getValueAndMessage.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\isString.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\isFunction.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\isBoolean.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\isMessage.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\logic\\getValidateError.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\logic\\appendErrors.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\logic\\validateField.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\logic\\skipValidation.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\logic\\getNodeParentName.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\logic\\getProxyFormState.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\Subject.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\isWeb.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\isProxyEnabled.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\unset.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\getValidationModes.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\isRadioOrCheckbox.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\isHTMLElement.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\logic\\getFields.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\useForm.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\useFormContext.tsx","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\logic\\generateId.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\logic\\mapId.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\remove.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\move.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\swap.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\prepend.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\append.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\insert.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\utils\\fillEmptyArray.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\useFieldArray.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\useFormState.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\logic\\getControllerValue.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\logic\\isNameInFieldArray.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\useController.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\useWatch.ts","C:\\Users\\gabri\\Bootcamp\\Challenges\\React-Portfolio\\portfolio\\node_modules\\react-hook-form\\src\\controller.tsx"],"sourcesContent":["export default (val: unknown): val is undefined => val === undefined;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport { get } from '../utils';\nimport { FieldRefs, InternalFieldName } from '../types';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName>,\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\nimport deepEqual from '../utils/deepEqual';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isEmptyObject from '../utils/isEmptyObject';\nimport { ReadFormState } from '../types';\nimport { VALIDATION_MODE } from '../constants';\n\nexport default <T, K extends ReadFormState>(\n  formState: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) =>\n  isEmptyObject(formState) ||\n  Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n  Object.keys(formState).find(\n    (key) =>\n      readFormStateRef[key as keyof ReadFormState] ===\n      (isRoot ? VALIDATION_MODE.all : true),\n  );\n","import * as React from 'react';\nimport set from '../utils/set';\nimport { FieldRefs, FieldValues } from '../types';\nimport omit from '../utils/omit';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  defaultValuesRef: React.MutableRefObject<FieldValues> = { current: {} },\n  output: Record<string, any> = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      if (current) {\n        getFieldsValues(\n          {\n            current,\n          },\n          defaultValuesRef,\n          output[name],\n        );\n      }\n    }\n  }\n\n  return {\n    ...defaultValuesRef.current,\n    ...output,\n  };\n};\n\nexport default getFieldsValues;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value)\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","import getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport isUndefined from '../utils/isUndefined';\nimport { Field } from '../types';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, Message, FieldError, InternalFieldErrors } from '../types';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n): Promise<InternalFieldErrors> => {\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    !inputValue || (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox ? (refs || [])[0] || {} : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (\n    (!isNullOrUndefined(min) || !isNullOrUndefined(max)) &&\n    inputValue !== ''\n  ) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(inputValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const validateRef = isRadioOrCheckbox && refs ? refs[0] : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(inputValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import * as React from 'react';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\nimport { VALIDATION_MODE } from '../constants';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (\n    value: Observer<T>,\n  ) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED &&\n  typeof window.HTMLElement !== UNDEFINED &&\n  typeof document !== UNDEFINED;\n","import isWeb from './isWeb';\nimport { UNDEFINED } from '../constants';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport default isProxyEnabled;\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { Field, FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isKey from '../utils/isKey';\nimport set from '../utils/set';\n\nexport default function getFields(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n) {\n  const currentFields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field | undefined;\n\n    if (field) {\n      !isKey(name)\n        ? set(currentFields, name, field._f)\n        : (currentFields[name] = field._f);\n    }\n  }\n\n  return currentFields;\n}\n","import * as React from 'react';\nimport focusFieldBy from './logic/focusFieldBy';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport getProxyFormState from './logic/getProxyFormState';\nimport Subject from './utils/Subject';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport getValidationModes from './utils/getValidationModes';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport isHTMLElement from './utils/isHTMLElement';\nimport getFields from './logic/getFields';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormReturn,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  Field,\n  FieldRefs,\n  UseFormProps,\n  RegisterOptions,\n  ReadFormState,\n  Ref,\n  SetValueConfig,\n  FormState,\n  FieldNamesMarkedBoolean,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  UseFormRegisterReturn,\n  FieldPath,\n  WatchObserver,\n  KeepStateOptions,\n  EventType,\n  UseFormTrigger,\n  UseFormSetValue,\n  UseFormUnregister,\n  UseFormClearErrors,\n  UseFormSetError,\n  UseFormRegister,\n  UseFormHandleSubmit,\n  UseFormReset,\n  WatchInternal,\n  GetFormIsDirty,\n  ChangeHandler,\n  PathValue,\n  UseFormGetValues,\n  UseFormWatch,\n  Path,\n  DeepPartial,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const fieldsNamesRef = React.useRef<Set<InternalFieldName>>(new Set());\n  const formStateSubjectRef = React.useRef(\n    new Subject<Partial<FormState<TFieldValues>>>(),\n  );\n  const watchSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      type?: EventType;\n      value?: unknown;\n    }>(),\n  );\n  const controllerSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      values: DefaultValues<TFieldValues>;\n    }>(),\n  );\n  const fieldArraySubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      fields: any;\n      isReset?: boolean;\n    }>(),\n  );\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet>(new Set());\n  const isMountedRef = React.useRef(false);\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isWatchAllRef = React.useRef(false);\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet>(new Set());\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !validationMode.isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const getIsValid = () =>\n    (formStateRef.current.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors));\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName,\n      error?: FieldError,\n      shouldRender: boolean | null = false,\n      state: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n      isWatched?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        isWatched\n      ) {\n        const updatedFormState = {\n          ...state,\n          isValid: resolverRef.current ? !!isValid : getIsValid(),\n          errors: formStateRef.current.errors,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        formStateSubjectRef.current.next(isWatched ? {} : updatedFormState);\n      }\n\n      formStateSubjectRef.current.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const _f = get(fieldsRef.current, name, {})._f as Field['_f'];\n\n      if (_f) {\n        const value =\n          isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n            ? ''\n            : rawValue;\n        _f.value = rawValue;\n\n        if (isRadioInput(_f.ref)) {\n          (_f.refs || []).forEach(\n            (radioRef: HTMLInputElement) =>\n              (radioRef.checked = radioRef.value === value),\n          );\n        } else if (isFileInput(_f.ref) && !isString(value)) {\n          _f.ref.files = value as FileList;\n        } else if (isMultipleSelect(_f.ref)) {\n          [..._f.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (value as string[]).includes(\n                selectRef.value,\n              )),\n          );\n        } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n          _f.refs.length > 1\n            ? _f.refs.forEach(\n                (checkboxRef) =>\n                  (checkboxRef.checked = Array.isArray(value)\n                    ? !!(value as []).find(\n                        (data: string) => data === checkboxRef.value,\n                      )\n                    : value === checkboxRef.value),\n              )\n            : (_f.refs[0].checked = !!value);\n        } else {\n          _f.ref.value = value;\n        }\n\n        if (shouldRender) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, name, rawValue);\n          controllerSubjectRef.current.next({\n            values: {\n              ...defaultValuesRef.current,\n              ...values,\n            } as DefaultValues<TFieldValues>,\n            name,\n          });\n        }\n\n        options.shouldDirty && updateAndGetDirtyState(name);\n        options.shouldValidate && trigger(name as Path<TFieldValues>);\n      }\n    },\n    [],\n  );\n\n  const getFormIsDirty: GetFormIsDirty = React.useCallback((name, data) => {\n    if (readFormStateRef.current.isDirty) {\n      const formValues = getFieldsValues(fieldsRef);\n\n      name && data && set(formValues, name, data);\n\n      return !deepEqual(formValues, defaultValuesRef.current);\n    }\n\n    return false;\n  }, []);\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          getFieldValue(get(fieldsRef.current, name) as Field),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: getFormIsDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && formStateSubjectRef.current.next(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names: InternalFieldName[],\n      currentNames: FieldName<TFieldValues>[] = [],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(fieldsRef, defaultValuesRef),\n        contextRef.current,\n        {\n          criteriaMode,\n          names: currentNames,\n          fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n        },\n      );\n\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(formStateRef.current.errors, name, error)\n          : unset(formStateRef.current.errors, name);\n      }\n\n      return errors;\n    },\n    [criteriaMode],\n  );\n\n  const validateForm = async (fieldsRef: FieldRefs) => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n          );\n\n          if (fieldError[_f.name]) {\n            set(formStateRef.current.errors, _f.name, fieldError[_f.name]);\n            unset(validFieldsRef.current, _f.name);\n          } else if (get(fieldsWithValidationRef.current, _f.name)) {\n            set(validFieldsRef.current, _f.name, true);\n            unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current));\n      }\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name) => {\n      const fields = isUndefined(name)\n        ? Object.keys(fieldsRef.current)\n        : Array.isArray(name)\n        ? name\n        : [name];\n      let isValid;\n\n      formStateSubjectRef.current.next({\n        isValidating: true,\n      });\n\n      if (resolverRef.current) {\n        isValid = isEmptyObject(\n          await executeSchemaOrResolverValidation(\n            fields,\n            isUndefined(name)\n              ? undefined\n              : (fields as FieldName<TFieldValues>[]),\n          ),\n        );\n      } else {\n        isUndefined(name)\n          ? await validateForm(fieldsRef.current)\n          : await Promise.all(\n              fields.map(async (data) => await executeValidation(data, null)),\n            );\n      }\n\n      formStateSubjectRef.current.next({\n        errors: formStateRef.current.errors,\n        isValidating: false,\n        isValid: resolverRef.current ? isValid : getIsValid(),\n      });\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([inputKey, inputValue]) => {\n        const fieldName = `${name}.${inputKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n\n        field && !field._f\n          ? setInternalValues(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const updateValueAndGetDefault = (name: InternalFieldName) => {\n    let defaultValue;\n    const field = get(fieldsRef.current, name) as Field;\n\n    if (\n      field &&\n      (!isEmptyObject(defaultValuesRef.current) || !isUndefined(field._f.value))\n    ) {\n      defaultValue = isUndefined(field._f.value)\n        ? get(defaultValuesRef.current, name)\n        : field._f.value;\n\n      if (!isUndefined(defaultValue)) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    return defaultValue;\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    isMountedRef.current = true;\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = fieldArrayNamesRef.current.has(name);\n\n    if (isFieldArray) {\n      fieldArraySubjectRef.current.next({\n        fields: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        formStateSubjectRef.current.next({\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getFormIsDirty(name, value),\n        });\n      }\n    }\n\n    (field && !field._f) || isFieldArray\n      ? setInternalValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && formStateSubjectRef.current.next({});\n    watchSubjectRef.current.next({ name, value });\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, type: inputType } }) => {\n      let name = (target as Ref)!.name;\n      let error;\n      let isValid;\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        const inputValue = inputType ? getFieldValue(field) : value;\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n        const shouldSkipValidation = skipValidation({\n          isBlurEvent,\n          isTouched: !!get(formStateRef.current.touchedFields, name),\n          isSubmitted: formStateRef.current.isSubmitted,\n          isReValidateOnBlur,\n          isReValidateOnChange,\n          ...validationMode,\n        });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const state = updateAndGetDirtyState(name, false);\n\n        if (isBlurEvent && !get(formStateRef.current.touchedFields, name)) {\n          set(formStateRef.current.touchedFields, name, true);\n          state.touchedFields = formStateRef.current.touchedFields;\n        }\n\n        let shouldRender = !isEmptyObject(state) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            watchSubjectRef.current.next({\n              name,\n              type,\n              value: inputValue,\n            });\n          return (\n            shouldRender &&\n            formStateSubjectRef.current.next(isWatched ? {} : state)\n          );\n        }\n\n        formStateSubjectRef.current.next({\n          isValidating: true,\n        });\n\n        if (resolverRef.current) {\n          const { errors } = await resolverRef.current(\n            getFieldsValues(fieldsRef, defaultValuesRef),\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields([name], fieldsRef.current),\n              names: [name as FieldName<TFieldValues>],\n            },\n          );\n          const previousFormIsValid = formStateRef.current.isValid;\n          error = get(errors, name);\n\n          if (isCheckBoxInput(target as Ref) && !error) {\n            const parentNodeName = getNodeParentName(name);\n            const currentError = get(errors, parentNodeName, {});\n            currentError.type && currentError.message && (error = currentError);\n\n            if (\n              currentError ||\n              get(formStateRef.current.errors, parentNodeName)\n            ) {\n              name = parentNodeName;\n            }\n          }\n\n          isValid = isEmptyObject(errors);\n\n          previousFormIsValid !== isValid && (shouldRender = true);\n        } else {\n          error = (await validateField(field, isValidateAllFieldCriteria))[\n            name\n          ];\n        }\n\n        !isBlurEvent &&\n          watchSubjectRef.current.next({\n            name,\n            type,\n            value: inputValue,\n          });\n        shouldRenderBaseOnError(\n          name,\n          error,\n          shouldRender,\n          state,\n          isValid,\n          isWatched,\n        );\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?: FieldPath<TFieldValues> | FieldPath<TFieldValues>[],\n  ) => {\n    const values = isMountedRef.current\n      ? getFieldsValues(fieldsRef, defaultValuesRef)\n      : defaultValuesRef.current;\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const previousIsValid = formStateRef.current.isValid;\n\n      if (resolver) {\n        const { errors } = await resolverRef.current!(\n          {\n            ...getFieldsValues(fieldsRef, defaultValuesRef),\n            ...values,\n          },\n          contextRef.current,\n          {\n            criteriaMode,\n            fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n          },\n        );\n        formStateRef.current.isValid = isEmptyObject(errors);\n      } else {\n        getIsValid();\n      }\n\n      previousIsValid !== formStateRef.current.isValid &&\n        formStateSubjectRef.current.next({\n          isValid: formStateRef.current.isValid,\n        });\n    },\n    [criteriaMode],\n  );\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(formStateRef.current.errors, inputName),\n      );\n\n    formStateSubjectRef.current.next({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    formStateSubjectRef.current.next({\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues = isMountedRef.current\n        ? getValues()\n        : isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : isArrayNames\n        ? defaultValue || {}\n        : { [fieldNames as string]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (isWatchAllRef.current = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of isArrayNames ? fieldNames : [fieldNames]) {\n        isGlobal && watchFieldsRef.current.add(fieldName as string);\n        result.push(get(fieldValues, fieldName as string));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | FieldPath<TFieldValues>[]\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? watchSubjectRef.current.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as string | string[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name\n      ? Array.isArray(name)\n        ? name\n        : [name]\n      : Object.keys(fieldsNamesRef.current)) {\n      fieldsNamesRef.current.delete(inputName);\n      fieldArrayNamesRef.current.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        if (!options.keepIsValid) {\n          unset(fieldsWithValidationRef.current, inputName);\n          unset(validFieldsRef.current, inputName);\n        }\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        !options.keepDefaultValue && unset(defaultValuesRef.current, inputName);\n\n        watchSubjectRef.current.next({\n          name: inputName,\n        });\n      }\n    }\n\n    formStateSubjectRef.current.next({\n      ...formStateRef.current,\n      ...(!options.keepDirty ? {} : { isDirty: getFormIsDirty() }),\n      ...(resolverRef.current ? {} : { isValid: getIsValid() }),\n    });\n\n    if (!options.keepIsValid) {\n      updateIsValid();\n    }\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    let field = get(fieldsRef.current, name) as Field;\n\n    if (field) {\n      const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n      if (\n        (isRadioOrCheckbox\n          ? Array.isArray(field._f.refs) &&\n            compact(field._f.refs).find(\n              (option) => ref.value === option.value && option === ref,\n            )\n          : ref === field._f.ref) ||\n        !field ||\n        (isWeb && isHTMLElement(field._f.ref) && !isHTMLElement(ref))\n      ) {\n        return;\n      }\n\n      field = {\n        _f: isRadioOrCheckbox\n          ? {\n              ...field._f,\n              refs: [\n                ...compact(field._f.refs || []).filter(\n                  (ref) => isHTMLElement(ref) && document.contains(ref),\n                ),\n                ref,\n              ],\n              ref: { type: ref.type, name },\n            }\n          : {\n              ...field._f,\n              ref,\n            },\n      };\n\n      set(fieldsRef.current, name, field);\n\n      const defaultValue = updateValueAndGetDefault(name);\n\n      if (\n        isRadioOrCheckbox && Array.isArray(defaultValue)\n          ? !deepEqual(get(fieldsRef.current, name)._f.value, defaultValue)\n          : isUndefined(get(fieldsRef.current, name)._f.value)\n      ) {\n        get(fieldsRef.current, name)._f.value = getFieldValue(\n          get(fieldsRef.current, name),\n        );\n      }\n\n      if (options) {\n        if (\n          !validationMode.isOnSubmit &&\n          field &&\n          readFormStateRef.current.isValid\n        ) {\n          validateField(field, isValidateAllFieldCriteria).then((error) => {\n            isEmptyObject(error)\n              ? set(validFieldsRef.current, name, true)\n              : unset(validFieldsRef.current, name);\n\n            formStateRef.current.isValid &&\n              !isEmptyObject(error) &&\n              setFormState({ ...formStateRef.current, isValid: getIsValid() });\n          });\n        }\n      }\n    }\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options) => {\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(get(fieldsRef.current, name)\n            ? {\n                ref: (get(fieldsRef.current, name)._f || {}).ref,\n                ...get(fieldsRef.current, name)._f,\n              }\n            : { ref: { name } }),\n          name,\n          ...options,\n        },\n      });\n      options && set(fieldsWithValidationRef.current, name, true);\n      fieldsNamesRef.current.add(name);\n\n      updateValueAndGetDefault(name);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null) =>\n              ref && registerFieldRef(name, ref, options),\n          };\n    },\n    [defaultValuesRef.current],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldValues = {\n        ...defaultValuesRef.current,\n        ...getFieldsValues(fieldsRef, defaultValuesRef),\n      };\n\n      formStateSubjectRef.current.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n            },\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          formStateSubjectRef.current.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key: string) => get(formStateRef.current.errors, key),\n              fieldsNamesRef.current,\n            );\n        }\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        formStateSubjectRef.current.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria, criteriaMode],\n  );\n\n  const resetFromState = React.useCallback(\n    ({\n      keepErrors,\n      keepDirty,\n      keepIsSubmitted,\n      keepTouched,\n      keepIsValid,\n      keepSubmitCount,\n    }: KeepStateOptions) => {\n      if (!keepIsValid) {\n        validFieldsRef.current = {};\n        fieldsWithValidationRef.current = {};\n      }\n\n      watchFieldsRef.current = new Set();\n      isWatchAllRef.current = false;\n\n      formStateSubjectRef.current.next({\n        submitCount: keepSubmitCount ? formStateRef.current.submitCount : 0,\n        isDirty: keepDirty ? formStateRef.current.isDirty : false,\n        isSubmitted: keepIsSubmitted ? formStateRef.current.isSubmitted : false,\n        isValid: keepIsValid\n          ? formStateRef.current.isValid\n          : !validationMode.isOnSubmit,\n        dirtyFields: keepDirty ? formStateRef.current.dirtyFields : {},\n        touchedFields: keepTouched ? formStateRef.current.touchedFields : {},\n        errors: keepErrors ? formStateRef.current.errors : {},\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n      });\n    },\n    [],\n  );\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      (defaultValuesRef.current = { ...updatedValues });\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      controllerSubjectRef.current.next({\n        values: { ...updatedValues },\n      });\n\n      watchSubjectRef.current.next({\n        value: { ...updatedValues },\n      });\n\n      fieldArraySubjectRef.current.next({\n        fields: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    resetFromState(keepStateOptions);\n  };\n\n  React.useEffect(() => {\n    isMountedRef.current = true;\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next(formState: Partial<FormState<TFieldValues>> = {}) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          setFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next(state) {\n        if (state.fields && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.fields);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    resolverRef.current && readFormStateRef.current.isValid && updateIsValid();\n\n    return () => {\n      watchSubjectRef.current.unsubscribe();\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        isWatchAllRef,\n        watchFieldsRef,\n        getFormIsDirty,\n        formStateSubjectRef,\n        fieldArraySubjectRef,\n        controllerSubjectRef,\n        watchSubjectRef,\n        watchInternal,\n        fieldsRef,\n        validFieldsRef,\n        fieldsWithValidationRef,\n        fieldArrayNamesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n  };\n}\n","import * as React from 'react';\nimport { UseFormReturn, FieldValues, FormProviderProps } from './types';\nimport omit from './utils/omit';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormReturn<TFieldValues> =>\n  (React.useContext(FormContext) as unknown) as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={(omit(props, 'children') as unknown) as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldValues } from '../types';\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id'\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): any =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    [keyName]: (value && value[keyName]) || generateId(),\n    ...value,\n  }));\n","import isUndefined from './isUndefined';\nimport compact from './compact';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (Array.isArray(index) ? index : [index]).sort((a, b) => a - b),\n      );\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...(Array.isArray(value) ? value : [value]), ...data];\n}\n","export default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...data, ...(Array.isArray(value) ? value : [value])];\n}\n","export default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(Array.isArray(value) ? value : [value]),\n    ...data.slice(index),\n  ];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport mapIds from './logic/mapId';\nimport getFieldArrayParentName from './logic/getNodeParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport appendAt from './utils/append';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport compact from './utils/compact';\nimport isUndefined from './utils/isUndefined';\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFieldsValues from './logic/getFieldsValues';\nimport omit from './utils/omit';\nimport {\n  FieldValues,\n  UseFieldArrayProps,\n  FieldArrayWithId,\n  UseFieldArrayReturn,\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldErrors,\n  FieldArrayPath,\n} from './types';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id'\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayProps<\n  TFieldValues,\n  TFieldArrayName,\n  TKeyName\n>): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const focusNameRef = React.useRef('');\n  const {\n    isWatchAllRef,\n    watchFieldsRef,\n    getFormIsDirty,\n    watchSubjectRef,\n    fieldArraySubjectRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    formStateRef,\n    formStateSubjectRef,\n    readFormStateRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n  } = control || methods.control;\n\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(\n    mapIds(\n      get(fieldArrayDefaultValuesRef.current, getFieldArrayParentName(name))\n        ? get(fieldArrayDefaultValuesRef.current, name, [])\n        : get(defaultValuesRef.current, name, []),\n      keyName,\n    ),\n  );\n\n  set(fieldArrayDefaultValuesRef.current, name, [...fields]);\n  fieldArrayNamesRef.current.add(name);\n\n  const omitKey = <\n    T extends Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[]\n  >(\n    fields: T,\n  ) =>\n    fields.map((field) =>\n      omit((field || {}) as Record<TKeyName, any>, keyName),\n    );\n\n  const getCurrentFieldsValues = () => {\n    const values = get(getFieldsValues(fieldsRef, defaultValuesRef), name, []);\n\n    return mapIds<TFieldValues, TKeyName>(\n      get(fieldArrayDefaultValuesRef.current, name, []).map(\n        (item: Partial<TFieldValues>, index: number) => ({\n          ...item,\n          ...values[index],\n        }),\n      ),\n      keyName,\n    );\n  };\n\n  const getFocusDetail = (\n    index: number,\n    options?: FieldArrayMethodProps,\n  ): string =>\n    options\n      ? !isUndefined(options.focusIndex)\n        ? `${name}.${options.focusIndex}`\n        : options.focusName\n        ? options.focusName\n        : !options.shouldFocus\n        ? ''\n        : `${name}.${index}`\n      : `${name}.${index}`;\n\n  const resetFields = <T>(index?: T) =>\n    (Array.isArray(index) ? index : [index]).forEach((currentIndex) =>\n      set(\n        fieldsRef.current,\n        `${name}${isUndefined(currentIndex) ? '' : `.${currentIndex}`}`,\n        isUndefined(currentIndex) ? [] : undefined,\n      ),\n    );\n\n  const setFieldsAndNotify = (\n    fieldsValues: Partial<FieldArray<TFieldValues, TFieldArrayName>>[] = [],\n  ) => setFields(mapIds(fieldsValues, keyName));\n\n  const cleanup = <T>(ref: T) =>\n    !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const updateDirtyFieldsWithDefaultValues = <\n    T extends Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[]\n  >(\n    updatedFieldArrayValues?: T,\n  ) =>\n    updatedFieldArrayValues &&\n    set(\n      formStateRef.current.dirtyFields,\n      name,\n      setFieldArrayDirtyFields(\n        omitKey(updatedFieldArrayValues),\n        get(defaultValuesRef.current, name, []),\n        get(formStateRef.current.dirtyFields, name, []),\n      ),\n    );\n\n  const batchStateUpdate = <T extends Function>(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n    },\n    updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = [],\n    shouldSet = true,\n  ) => {\n    if (get(fieldsRef.current, name)) {\n      const output = method(get(fieldsRef.current, name), args.argA, args.argB);\n      shouldSet && set(fieldsRef.current, name, output);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (\n      readFormStateRef.current.touchedFields &&\n      get(formStateRef.current.touchedFields, name)\n    ) {\n      const output = method(\n        get(formStateRef.current.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.touchedFields, name, output);\n      cleanup(formStateRef.current.touchedFields);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(\n        formStateRef.current.dirtyFields,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFieldArrayValues),\n          get(defaultValuesRef.current, name, []),\n          get(formStateRef.current.dirtyFields, name, []),\n        ),\n      );\n      updateDirtyFieldsWithDefaultValues(updatedFieldArrayValues);\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    if (readFormStateRef.current.isValid) {\n      set(\n        validFieldsRef.current,\n        name,\n        method(get(validFieldsRef.current, name, []), args.argA),\n      );\n      cleanup(validFieldsRef.current);\n\n      set(\n        fieldsWithValidationRef.current,\n        name,\n        method(get(fieldsWithValidationRef.current, name, []), args.argA),\n      );\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    formStateSubjectRef.current.next({\n      isDirty: getFormIsDirty(name, omitKey(updatedFieldArrayValues)),\n      errors: formStateRef.current.errors as FieldErrors<TFieldValues>,\n      isValid: formStateRef.current.isValid,\n    });\n  };\n\n  const registerFieldArray = <T extends Object[]>(\n    values: T,\n    index = 0,\n    parentName = '',\n  ) =>\n    values.forEach((appendValueItem, valueIndex) =>\n      Object.entries(appendValueItem).forEach(([key, value]) => {\n        const inputName = `${parentName || name}.${\n          parentName ? valueIndex : index + valueIndex\n        }.${key}`;\n\n        Array.isArray(value)\n          ? registerFieldArray(value, valueIndex, inputName)\n          : set(fieldsRef.current, inputName, {\n              _f: {\n                ref: {\n                  name: inputName,\n                },\n                name: inputName,\n                value,\n              },\n            });\n      }),\n    );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = Array.isArray(value) ? value : [value];\n    const updatedFieldArrayValues = appendAt(\n      getCurrentFieldsValues(),\n      appendValue,\n    );\n    const currentIndex = updatedFieldArrayValues.length - appendValue.length;\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n      false,\n    );\n    registerFieldArray(appendValue, currentIndex);\n\n    focusNameRef.current = getFocusDetail(currentIndex, options);\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const prependValue = Array.isArray(value) ? value : [value];\n    const updatedFieldArrayValues = prependAt(\n      getCurrentFieldsValues(),\n      prependValue,\n    );\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(prependValue);\n\n    focusNameRef.current = getFocusDetail(0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(getCurrentFieldsValues(), index);\n    resetFields(index);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updatedFieldArrayValues,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const insertValue = Array.isArray(value) ? value : [value];\n    const updatedFieldArrayValues = insertAt(\n      getCurrentFieldsValues(),\n      index,\n      insertValue,\n    );\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(insertValue, index);\n\n    focusNameRef.current = getFocusDetail(index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      fieldValues,\n      false,\n    );\n    setFieldsAndNotify(fieldValues);\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    setFieldsAndNotify(fieldValues);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      fieldValues,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    if (isWatchAllRef.current) {\n      formStateSubjectRef.current.next({});\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (name.startsWith(watchField)) {\n          formStateSubjectRef.current.next({});\n          break;\n        }\n      }\n    }\n\n    watchSubjectRef.current.next({\n      name,\n      value: get(getFieldsValues(fieldsRef, defaultValuesRef), name, []),\n    });\n\n    focusNameRef.current &&\n      focusFieldBy(fieldsRef.current, (key: string) =>\n        key.startsWith(focusNameRef.current),\n      );\n\n    focusNameRef.current = '';\n\n    fieldArraySubjectRef.current.next({\n      name,\n      fields: omitKey([...fields]),\n    });\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const fieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next({ name: inputFieldArrayName, fields, isReset }) {\n        if (isReset) {\n          unset(fieldsRef.current, inputFieldArrayName || name);\n\n          inputFieldArrayName\n            ? set(\n                fieldArrayDefaultValuesRef.current,\n                inputFieldArrayName,\n                fields,\n              )\n            : (fieldArrayDefaultValuesRef.current = fields);\n\n          setFieldsAndNotify(get(fieldArrayDefaultValuesRef.current, name));\n        }\n      },\n    });\n    !get(fieldsRef.current, name) && set(fieldsRef.current, name, []);\n\n    return () => {\n      fieldArrayDefaultValuesRef.current = getFieldsValues(fieldsRef);\n      fieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport {\n  FieldValues,\n  FormState,\n  UseFormStateReturn,\n  UseFormStateProps,\n} from './types';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext();\n  const { formStateRef, formStateSubjectRef, readFormStateRef } =\n    (props && props.control) || methods.control;\n\n  const [formState, updateFormState] = React.useState(formStateRef.current);\n  const readFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n\n  React.useEffect(() => {\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next: (formState) => {\n        shouldRenderFormState(formState, readFormState.current) &&\n          updateFormState({\n            ...formStateRef.current,\n            ...formState,\n          });\n      },\n    });\n\n    return () => formStateSubscription.unsubscribe();\n  }, []);\n\n  return getProxyFormState<TFieldValues>(\n    isProxyEnabled,\n    formState as FormState<TFieldValues>,\n    readFormStateRef,\n    readFormState,\n    false,\n  );\n}\n\nexport { useFormState };\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import getNodeParentName from './getNodeParentName';\nimport { InternalFieldName } from '../types';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { EVENTS } from './constants';\nimport {\n  FieldValues,\n  UseControllerProps,\n  UseControllerReturn,\n  InternalFieldName,\n} from './types';\n\nexport function useController<TFieldValues extends FieldValues = FieldValues>({\n  name,\n  rules,\n  defaultValue,\n  control,\n}: UseControllerProps<TFieldValues>): UseControllerReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const {\n    defaultValuesRef,\n    register,\n    fieldsRef,\n    fieldArrayNamesRef,\n    controllerSubjectRef,\n  } = control || methods.control;\n\n  const { onChange, onBlur, ref } = register(name, rules);\n  const [value, setInputStateValue] = React.useState(\n    isUndefined(get(fieldsRef.current, name)._f.value) ||\n      isNameInFieldArray(fieldArrayNamesRef.current, name)\n      ? isUndefined(defaultValue)\n        ? get(defaultValuesRef.current, name)\n        : defaultValue\n      : get(fieldsRef.current, name)._f.value,\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n  });\n  get(fieldsRef.current, name)._f.value = value;\n\n  React.useEffect(() => {\n    const controllerSubscription = controllerSubjectRef.current.subscribe({\n      next: (data) =>\n        (!data.name || name === data.name) &&\n        setInputStateValue(get(data.values, name)),\n    });\n\n    (ref as (instance: any) => void)({\n      target: value,\n    });\n\n    return () => controllerSubscription.unsubscribe();\n  }, [name]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        onBlur({\n          target: {\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref,\n    },\n    formState,\n    fieldState: Object.defineProperties(\n      {},\n      {\n        invalid: {\n          get() {\n            return !!get(formState.errors, name);\n          },\n        },\n        isDirty: {\n          get() {\n            return !!get(formState.dirtyFields, name);\n          },\n        },\n        isTouched: {\n          get() {\n            return !!get(formState.touchedFields, name);\n          },\n        },\n        error: {\n          get() {\n            return get(formState.errors, name);\n          },\n        },\n      },\n    ),\n  };\n}\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport {\n  DeepPartial,\n  UseWatchProps,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n  FieldPath,\n  InternalFieldName,\n  FieldPathValue,\n  FieldPathValues,\n} from './types';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): UnpackNestedValue<DeepPartial<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>(props: {\n  name: TName;\n  defaultValue?: FieldPathValue<TFieldValues, TName>;\n  control?: Control<TFieldValues>;\n}): FieldPathValue<TFieldValues, TName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[]\n>(props: {\n  name: TName;\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): FieldPathValues<TFieldValues, TName>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const { control, name, defaultValue } = props || {};\n  const methods = useFormContext();\n\n  const { watchInternal, watchSubjectRef } = control || methods.control;\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? watchInternal(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    watchInternal(name as InternalFieldName);\n\n    const watchSubscription = watchSubjectRef.current.subscribe({\n      next: ({ name: inputName, value }) => {\n        (!name ||\n          !inputName ||\n          (Array.isArray(name) ? name : [name]).some(\n            (fieldName) =>\n              inputName &&\n              fieldName &&\n              inputName.startsWith(fieldName as InternalFieldName),\n          )) &&\n          updateValue(\n            isString(inputName) && name === inputName && !isUndefined(value)\n              ? value\n              : watchInternal(\n                  name as string,\n                  defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n                ),\n          );\n      },\n    });\n\n    return () => watchSubscription.unsubscribe();\n  }, [name]);\n\n  return value;\n}\n","import { useController } from './useController';\nimport { ControllerProps, FieldValues } from './types';\n\nconst Controller = <TFieldValues extends FieldValues = FieldValues>(\n  props: ControllerProps<TFieldValues>,\n) => props.render(useController(props));\n\nexport { Controller };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}