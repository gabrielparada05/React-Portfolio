{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gabri\\\\Bootcamp\\\\Challenges\\\\React-Portfolio\\\\portfolio\\\\src\\\\components\\\\PortfolioContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport NavTabs from './NavTabs';\nimport About from './pages/About';\nimport Resume from './pages/Resume';\nimport Projects from './pages/Projects';\nimport Contact from './pages/Contact';\nimport Footer from './Footer';\nimport '../styles/style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PortfolioContainer() {\n  _s();\n  const [currentPage, setCurrentPage] = useState('About');\n\n  // This method is checking to see what the value of `currentPage` is. Depending on the value of currentPage, we return the corresponding component to render.\n  const renderPage = () => {\n    if (currentPage === 'About') {\n      return /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 14\n      }, this);\n    }\n    if (currentPage === 'Resume') {\n      return /*#__PURE__*/_jsxDEV(Resume, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 14\n      }, this);\n    }\n    if (currentPage === 'Projects') {\n      return /*#__PURE__*/_jsxDEV(Projects, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(Contact, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this);\n  };\n\n  // const handlePageChange = (page) => setCurrentPage(page);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavTabs, {\n      currentPage: currentPage,\n      setCurrentPage: setCurrentPage,\n      children: [\"  \", renderPage(), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(PortfolioContainer, \"3gPMOXGJOEUgl1xJgjHQ6eGM7Kc=\");\n_c = PortfolioContainer;\nvar _c;\n$RefreshReg$(_c, \"PortfolioContainer\");","map":{"version":3,"names":["React","useState","NavTabs","About","Resume","Projects","Contact","Footer","jsxDEV","_jsxDEV","PortfolioContainer","_s","currentPage","setCurrentPage","renderPage","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","$RefreshReg$"],"sources":["C:/Users/gabri/Bootcamp/Challenges/React-Portfolio/portfolio/src/components/PortfolioContainer.js"],"sourcesContent":["import React, { useState } from 'react';\nimport NavTabs from './NavTabs';\nimport About from './pages/About';\nimport Resume from './pages/Resume';\nimport Projects from './pages/Projects';\nimport Contact from './pages/Contact';\nimport Footer from './Footer';\n\nimport '../styles/style.css'\n\nexport default function PortfolioContainer() {\n  const [currentPage, setCurrentPage] = useState('About');\n\n  // This method is checking to see what the value of `currentPage` is. Depending on the value of currentPage, we return the corresponding component to render.\n  const renderPage = () => {\n    if (currentPage === 'About') {\n      return <About />;\n    }\n    if (currentPage === 'Resume') {\n      return <Resume />;\n    }\n    if (currentPage === 'Projects') {\n      return <Projects />;\n    }\n    return <Contact />;\n  };\n  \n  // const handlePageChange = (page) => setCurrentPage(page);\n\n  return (\n    <div >\n      {/* We are passing the currentPage from state and the function to update it */}\n      <NavTabs currentPage={currentPage} setCurrentPage={setCurrentPage} >  {renderPage()} </NavTabs>\n      {/* Here we are calling the renderPage method which will return a component  */}\n     \n      <Footer  />\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,KAAK,MAAM,eAAe;AACjC,OAAOC,MAAM,MAAM,gBAAgB;AACnC,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,OAAO,MAAM,iBAAiB;AACrC,OAAOC,MAAM,MAAM,UAAU;AAE7B,OAAO,qBAAqB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5B,eAAe,SAASC,kBAAkBA,CAAA,EAAG;EAAAC,EAAA;EAC3C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,OAAO,CAAC;;EAEvD;EACA,MAAMa,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIF,WAAW,KAAK,OAAO,EAAE;MAC3B,oBAAOH,OAAA,CAACN,KAAK;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAClB;IACA,IAAIN,WAAW,KAAK,QAAQ,EAAE;MAC5B,oBAAOH,OAAA,CAACL,MAAM;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACnB;IACA,IAAIN,WAAW,KAAK,UAAU,EAAE;MAC9B,oBAAOH,OAAA,CAACJ,QAAQ;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACrB;IACA,oBAAOT,OAAA,CAACH,OAAO;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpB,CAAC;;EAED;;EAEA,oBACET,OAAA;IAAAU,QAAA,gBAEEV,OAAA,CAACP,OAAO;MAACU,WAAW,EAAEA,WAAY;MAACC,cAAc,EAAEA,cAAe;MAAAM,QAAA,GAAE,IAAE,EAACL,UAAU,CAAC,CAAC,EAAC,GAAC;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,eAG/FT,OAAA,CAACF,MAAM;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEV;AAACP,EAAA,CA5BuBD,kBAAkB;AAAAU,EAAA,GAAlBV,kBAAkB;AAAA,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}